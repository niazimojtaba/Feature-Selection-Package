function run_package(Dataset,train,valid,train_label,valid_label)
% Dataset = ['Dexter'];
% train = load('./../Datasets/Dexter/dexter_train_.data');
% valid = load('./../Datasets/Dexter/dexter_valid_.data');
% train_label = load('./../Datasets/Dexter/dexter_train.labels');
% valid_label = load('./../Datasets/Dexter/dexter_valid.labels');
% 
Algorithm = ['fsMRMR' ,'FAST_OSFS' ,'alpha_investing', 'fsChiSquare' ];
train_label(find(train_label == -1)) = max(train_label)+1;
valid_label(find(valid_label == -1)) = max(train_label)+1;
train_label(find(train_label == 0)) = max(train_label)+1;
valid_label(find(valid_label == 0)) = max(train_label)+1;

Etime = [];
ACC_KNN = [];
COMPACTNESS = [];
ACC_Naive = [];
ACC_SVM = [];
% t = cputime;
% BCF=OSFS(train,train_label);
% e = cputime-t;
% model=train(:,BCF);
% sample=valid(:,BCF);
% y_est=knnclassify(sample,model,train_label,3,'cityblock');
% accuracy=sum(y_est == valid_label)/(size(valid_label,1));
% compactness=length(BCF);
% COMPACTNESS = [COMPACTNESS compactness];
% ACC = [ACC accuracy];
% Etime = [Etime e];
t = cputime;
disp('fsMRMR ... ');
OUT=fsMRMR(train,train_label);
disp('finished fsMRMR ... ');
BCF = OUT.fList';
BCF_fsMRMR = BCF;
e = cputime-t;
model=train(:,BCF);
sample=valid(:,BCF);
y_est=knnclassify(sample,model,train_label,3,'cityblock');
accuracy=sum(y_est == valid_label)/(size(valid_label,1));
ACC_KNN = [ACC_KNN accuracy];
y_est=knnclassify(sample,model,train_label,5,'cityblock');
accuracy=sum(y_est == valid_label)/(size(valid_label,1));
ACC_KNN = [ACC_KNN accuracy];
y_est=knnclassify(sample,model,train_label,7,'cityblock');
accuracy=sum(y_est == valid_label)/(size(valid_label,1));
ACC_KNN = [ACC_KNN accuracy];
compactness=length(BCF);
COMPACTNESS = [COMPACTNESS compactness];
aa = NaiveBayes.fit(model,train_label,'Distribution','mvmn');
bb = aa.predict(sample);
accuracy=sum(bb == valid_label)/(size(valid_label,1));
ACC_Naive = [ACC_Naive accuracy];
Etime = [Etime e];
SVMstruct = svmtrain(train_label, model, '-c 1 -g 0.07 -b 1');
[predict_label, acc, prob_estimates] = svmpredict(valid_label, sample, SVMstruct, '-b 1');
ACC_SVM = [ACC_SVM acc];
data1 = [train  train_label];
for j = 1 : size(data1,2)
    un = unique(data1(:,j));
    for i = 1 : size(data1,1)
        data1(i,j) = find(un == data1(i,j));
    end
end

t = cputime;
disp('fast OSFS ... ');
[BCF,time]=fast_osfs_d(data1,size(data1,2),0.05,'chi2');
if(length(BCF) == 0)
    BCF =1;
end
BCF_OSFS = BCF;
disp('finished fast OSFS ... ');
e = cputime-t;
model=train(:,BCF);
sample=valid(:,BCF);
y_est=knnclassify(sample,model,train_label,3,'cityblock');
accuracy=sum(y_est == valid_label)/(size(valid_label,1));
ACC_KNN = [ACC_KNN accuracy];
y_est=knnclassify(sample,model,train_label,5,'cityblock');
accuracy=sum(y_est == valid_label)/(size(valid_label,1));
ACC_KNN = [ACC_KNN accuracy];
y_est=knnclassify(sample,model,train_label,7,'cityblock');
accuracy=sum(y_est == valid_label)/(size(valid_label,1));
ACC_KNN = [ACC_KNN accuracy];
compactness=length(BCF);
COMPACTNESS = [COMPACTNESS compactness];
aa = NaiveBayes.fit(model,train_label,'Distribution','mvmn');
bb = aa.predict(sample);
accuracy=sum(bb == valid_label)/(size(valid_label,1));
ACC_Naive = [ACC_Naive accuracy];
Etime = [Etime e];
SVMstruct = svmtrain(train_label, model, '-c 1 -g 0.07 -b 1');
[predict_label, acc, prob_estimates] = svmpredict(valid_label, sample, SVMstruct, '-b 1');
ACC_SVM = [ACC_SVM acc];

t = cputime;
disp('alpha investing ... ');
BCF=alpha_investing(train,train_label);
BCF_alpha = BCF;
disp('finished Alpha Investing ... ');
e = cputime-t;
model=train(:,BCF);
sample=valid(:,BCF);
y_est=knnclassify(sample,model,train_label,3,'cityblock');
accuracy=sum(y_est == valid_label)/(size(valid_label,1));
ACC_KNN = [ACC_KNN accuracy];
y_est=knnclassify(sample,model,train_label,5,'cityblock');
accuracy=sum(y_est == valid_label)/(size(valid_label,1));
ACC_KNN = [ACC_KNN accuracy];
y_est=knnclassify(sample,model,train_label,7,'cityblock');
accuracy=sum(y_est == valid_label)/(size(valid_label,1));
ACC_KNN = [ACC_KNN accuracy];
compactness=length(BCF);
aa = NaiveBayes.fit(model,train_label,'Distribution','mvmn');
bb = aa.predict(sample);
accuracy=sum(bb == valid_label)/(size(valid_label,1));
ACC_Naive = [ACC_Naive accuracy];
COMPACTNESS = [COMPACTNESS compactness];
Etime = [Etime e];
SVMstruct = svmtrain(train_label, model, '-c 1 -g 0.07 -b 1');
[predict_label, acc, prob_estimates] = svmpredict(valid_label, sample, SVMstruct, '-b 1');
ACC_SVM = [ACC_SVM acc];


t = cputime;
disp('chi Square ... ');
Out=fsChiSquare(train,train_label);
disp('finished ChiSquare ... ');
BCF = Out.fList(1:min(floor(size(train,2)/3),10))';
BCFChiSquare = BCF;
e = cputime-t;
model=train(:,BCF);
sample=valid(:,BCF);
y_est=knnclassify(sample,model,train_label,3,'cityblock');
accuracy=sum(y_est == valid_label)/(size(valid_label,1));
ACC_KNN = [ACC_KNN accuracy];
y_est=knnclassify(sample,model,train_label,5,'cityblock');
accuracy=sum(y_est == valid_label)/(size(valid_label,1));
ACC_KNN = [ACC_KNN accuracy];
y_est=knnclassify(sample,model,train_label,7,'cityblock');
accuracy=sum(y_est == valid_label)/(size(valid_label,1));
ACC_KNN = [ACC_KNN accuracy];
compactness = min(floor(size(train,2)/3),10);
aa = NaiveBayes.fit(model,train_label,'Distribution','mvmn');
bb = aa.predict(sample);
accuracy=sum(bb == valid_label)/(size(valid_label,1));
ACC_Naive = [ACC_Naive accuracy];
COMPACTNESS = [COMPACTNESS compactness];
Etime = [Etime e];
SVMstruct = svmtrain(train_label, model, '-c 1 -g 0.07 -b 1');
[predict_label, acc, prob_estimates] = svmpredict(valid_label, sample, SVMstruct, '-b 1');
ACC_SVM = [ACC_SVM acc];

BCF = Out.fList(1:min(floor(size(train,2)/2),20))';
BCFChiSquare = BCF;
e = cputime-t;
model=train(:,BCF);
sample=valid(:,BCF);
y_est=knnclassify(sample,model,train_label,3,'cityblock');
accuracy=sum(y_est == valid_label)/(size(valid_label,1));
ACC_KNN = [ACC_KNN accuracy];
y_est=knnclassify(sample,model,train_label,5,'cityblock');
accuracy=sum(y_est == valid_label)/(size(valid_label,1));
ACC_KNN = [ACC_KNN accuracy];
y_est=knnclassify(sample,model,train_label,7,'cityblock');
accuracy=sum(y_est == valid_label)/(size(valid_label,1));
ACC_KNN = [ACC_KNN accuracy];
compactness=min(floor(size(train,2)/3),20);
aa = NaiveBayes.fit(model,train_label,'Distribution','mvmn');
bb = aa.predict(sample);
accuracy=sum(bb == valid_label)/(size(valid_label,1));
ACC_Naive = [ACC_Naive accuracy];
COMPACTNESS = [COMPACTNESS compactness];
Etime = [Etime e];
SVMstruct = svmtrain(train_label, model, '-c 1 -g 0.07 -b 1');
[predict_label, acc, prob_estimates] = svmpredict(valid_label, sample, SVMstruct, '-b 1');
ACC_SVM = [ACC_SVM acc];

BCF = Out.fList(1:min(floor(size(train,2)/1),30))';
BCFChiSquare = BCF;
e = cputime-t;
model=train(:,BCF);
sample=valid(:,BCF);
y_est=knnclassify(sample,model,train_label,3,'cityblock');
accuracy=sum(y_est == valid_label)/(size(valid_label,1));
ACC_KNN = [ACC_KNN accuracy];
y_est=knnclassify(sample,model,train_label,5,'cityblock');
accuracy=sum(y_est == valid_label)/(size(valid_label,1));
ACC_KNN = [ACC_KNN accuracy];
y_est=knnclassify(sample,model,train_label,7,'cityblock');
accuracy=sum(y_est == valid_label)/(size(valid_label,1));
ACC_KNN = [ACC_KNN accuracy];
compactness=min(floor(size(train,2)/1),30);
aa = NaiveBayes.fit(model,train_label,'Distribution','mvmn');
bb = aa.predict(sample);
accuracy=sum(bb == valid_label)/(size(valid_label,1));
ACC_Naive = [ACC_Naive accuracy];
COMPACTNESS = [COMPACTNESS compactness];
Etime = [Etime e];
SVMstruct = svmtrain(train_label, model, '-c 1 -g 0.07 -b 1');
[predict_label, acc, prob_estimates] = svmpredict(valid_label, sample, SVMstruct, '-b 1');
ACC_SVM = [ACC_SVM acc];

save(sprintf('%s.mat',Dataset));

end